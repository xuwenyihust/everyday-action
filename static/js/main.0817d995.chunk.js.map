{"version":3,"sources":["components/Navigation/NavigationItems/NavigationItem/NavigationItem.js","components/Navigation/NavigationItems/NavigationItems.js","components/Navigation/Navigation.js","components/Layout/Layout.js","initialData.js","components/TodoList/Column/TodoForm/TodoForm.js","components/TodoList/Column/TodoItems/TodoItems.js","components/TodoList/Column/TodoItems/TodoItem/TodoItem.js","components/TodoList/Column/Column.js","components/TodoList/Column/TodoItems/TodoItem/TodoItemSummary/TodoItemSummary.js","components/UI/Modal/Modal.js","containers/TodoListBuilder/TodoListBuilder.js","App.js","serviceWorker.js","index.js"],"names":["navigationItem","props","className","href","link","active","children","navigationItems","navigation","layout","initialData","itemTypes","items","1593920420073","id","created_timestamp","content","type","done","1593920427447","1593920442267","1593988570469","columns","title","taskIds","itemToSubmit","columnOrder","editingItem","itemUnderEditing","todoForm","onSubmit","submitted","placeholder","value","onChange","inputChanged","todoItems","this","key","Component","todoItem","icon","item","Icon","draggableId","toString","index","provided","draggableProps","dragHandleProps","ref","innerRef","onClick","contentClicked","editClicked","closeClicked","columnId","column","itemObjects","Object","keys","map","itemKey","e","formInputChanged","droppableId","droppableProps","todoItemSummary","itemTypeOptions","t","selected","itemSummaryContentChanged","itemSummaryTypeChanged","saveClicked","cancelClicked","modal","style","transform","show","opacity","TodoList","state","onDragEnd","result","destination","source","newTaskIds","Array","from","splice","newColumn","newState","setState","sourceColumn","destinationColumn","newSourceTaskIds","newDestinationTaskIds","newSourceColumn","newDestinationColumn","formInputChangeHandler","event","newItemToSubmit","target","addItemHandler","preventDefault","newItems","newId","Date","now","newItem","push","removeItemHandler","itemId","console","log","updatedItems","updatedColumn","updatedTaskIds","filter","editItemHandler","revertItemDoneHandler","updatedItem","itemSummaryContentChangeHandler","itemSummaryTypeChangeHandler","editItemSaveHandler","editItemCancelHandler","taskId","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.0817d995.chunk.js","sourcesContent":["import React from 'react';\nimport './NavigationItem.css';\n\nconst navigationItem = (props) => (\n    <li className='NavigationItem'>\n        <a \n            href={props.link}\n            className={props.active ? 'active' : null}>{props.children}</a>\n    </li>\n);\n\nexport default navigationItem;","import React from 'react'\nimport './NavigationItems.css';\nimport NavigationItem from './NavigationItem/NavigationItem';\n\nconst navigationItems = (props) => (\n    <ul className='NavigationItems'>\n        <NavigationItem link=\"/\" active={true}>主页</NavigationItem>\n    </ul>\n);\n\nexport default navigationItems;","import React from 'react';\nimport './Navigation.css';\nimport NavigationItems from './NavigationItems/NavigationItems';\n\nconst navigation = () => (\n    <header className='Navigation'>\n        {/* <div>MENU</div> */}\n        <nav>\n            <NavigationItems />\n        </nav>\n    </header>\n);\n\nexport default navigation;","import React from 'react';\nimport './Layout.css';\nimport Navigation from '../Navigation/Navigation';\n\nconst layout = (props) => {\n\n    return (\n        <div>\n            <Navigation />\n            <main className=\"Content\">\n                {props.children}\n            </main>\n        </div>\n    )\n};\n\nexport default layout;\n","const initialData = {\n\n    itemTypes: [\"运动\", \"生活\", \"学习\", \"工作\", \"娱乐\"],\n    items: {\n        1593920420073: {\n            id: 1593920420073,\n            created_timestamp: 1593920420073,\n            content: \"跑步\",\n            type: \"运动\",\n            done: false\n        },\n        1593920427447: {\n            id: 1593920427447,\n            created_timestamp: 1593920420073,\n            content: \"混合有氧\",\n            type: \"运动\",\n            done: false\n        },\n        1593920442267: {\n            id: 1593920442267,\n            created_timestamp: 1593920420073,\n            content: \"洗牙\",\n            type: \"生活\",\n            done: false\n        },\n        1593988570469: {\n            id: 1593988570469,\n            created_timestamp: 1593988570469,\n            content: \"看书\",\n            type: \"学习\",\n            done: false\n        }\n    },\n\n    columns: {\n        'column-1': {\n            id: 'column-1',\n            title: '感兴趣',\n            taskIds: [1593920420073, 1593920427447],\n            itemToSubmit: {\n                id: null,\n                content: \"新任务\",\n                type: null,\n                created_timestamp: null,\n                done: false\n            },\n        },\n        'column-2': {\n            id: 'column-2',\n            title: '行动中',\n            taskIds: [1593920442267, 1593988570469],\n            itemToSubmit: {\n                id: null,\n                content: \"新任务\",\n                type: null,\n                created_timestamp: null,\n                done: false\n            },\n        }\n    },\n\n    columnOrder: ['column-1', 'column-2'],\n\n    editingItem: false,\n    itemUnderEditing: {}\n}\n\nexport default initialData;","import React from 'react';\nimport './TodoForm.css';\n\nconst todoForm = (props) => (\n    <div className='TodoForm'>\n        <form onSubmit={props.submitted}>\n            <input \n                placeholder={props.value}\n                value={props.value}\n                onChange={props.inputChanged}></input>\n            <button type=\"submit\">+</button>\n        </form>\n    </div>\n);\n\nexport default todoForm;","import React, {Component} from 'react';\nimport './TodoItems.css';\n\nclass todoItems extends Component {\n\n    render () {\n        return (\n            <div className=\"TodoItems\">\n                <h4>{this.props.key}</h4>\n                <ul>\n                    {this.props.children}\n                </ul>\n            </div>\n        );\n    }\n};\n\nexport default todoItems;","import React, { Component } from 'react';\nimport { Draggable } from 'react-beautiful-dnd';\nimport Icon from '@material-ui/core/Icon';\nimport DirectionsRunIcon from '@material-ui/icons/DirectionsRun';\nimport ImportContactsIcon from '@material-ui/icons/ImportContacts';\nimport AirlineSeatIndividualSuiteIcon from '@material-ui/icons/AirlineSeatIndividualSuite';\nimport LaptopChromebookIcon from '@material-ui/icons/LaptopChromebook';\nimport SportsEsportsIcon from '@material-ui/icons/SportsEsports';\nimport './TodoItem.css';\n\nclass todoItem extends Component {\n\n    render() {\n\n        let icon;\n        switch (this.props.item.type) {\n            case \"运动\":\n                icon = <DirectionsRunIcon />;\n                break;\n            case \"生活\":\n                icon = <AirlineSeatIndividualSuiteIcon />;\n                break;\n            case \"学习\":\n                icon = <ImportContactsIcon />;\n                break;\n            case \"工作\":\n                icon = <LaptopChromebookIcon />;\n                break;\n            case \"娱乐\":\n                icon = <SportsEsportsIcon />;\n                break;\n            default:\n                icon = <Icon>star</Icon>;\n                break;\n        }\n\n        return (\n            <Draggable\n                draggableId={this.props.item.id.toString()}\n                index={this.props.index}>\n                    {(provided) => (\n                        <div className=\"TodoItem\"\n                            {...provided.draggableProps}\n                            {...provided.dragHandleProps}\n                            ref={provided.innerRef}\n                        >\n                            {icon}\n                            <p \n                                className={this.props.item.done ? 'done' : 'undone'}\n                                onClick={() => this.props.contentClicked(this.props.item.id)}>{this.props.item.content}</p>\n            \n                            <button\n                                type=\"button\" \n                                className=\"editButton\"\n                                onClick={() => this.props.editClicked(this.props.item.id)}><i className=\"fa fa-bars\"></i></button>\n                            <button \n                                type=\"button\" \n                                className=\"closeButton\"\n                                onClick={() => this.props.closeClicked(this.props.item.id, this.props.columnId)}><i className=\"fa fa-close\"></i></button>\n                        </div>\n                    )}\n            </Draggable>\n        );\n    };\n}\n\nexport default todoItem;","import React, {Component} from 'react';\nimport './Column.css';\nimport { Droppable } from 'react-beautiful-dnd';\nimport TodoForm from './TodoForm/TodoForm';\nimport TodoItems from './TodoItems/TodoItems';\nimport TodoItem from './TodoItems/TodoItem/TodoItem';\n\nclass column extends Component {\n\n    render () {\n\n        const itemObjects = this.props.items;\n        const items = Object.keys(itemObjects).map((itemKey, index) => {\n            return <TodoItem \n                        columnId={this.props.column.id}\n                        key={itemObjects[itemKey].id} \n                        item={itemObjects[itemKey]} \n                        contentClicked={this.props.contentClicked} \n                        editClicked={this.props.editClicked} \n                        closeClicked={this.props.closeClicked}\n                        index={index}/>\n        })\n\n        return (\n            <div className='Column'>\n                <h3>{this.props.column.title}</h3>\n                <TodoForm \n                    value={this.props.column.itemToSubmit.content} \n                    inputChanged={(e) => this.props.formInputChanged(e,this. props.column.id)} \n                    submitted={(e) => this.props.submitted(e, this.props.column.id)}/>\n                <Droppable \n                    droppableId={this.props.column.id}>\n                    {(provided) => (\n                        <div\n                            ref={provided.innerRef}\n                            {...provided.droppableProps}>\n                            <TodoItems>\n                                {items}\n                            </TodoItems>\n                            {provided.placeholder}\n                        </div>\n                        \n                    )}\n                </Droppable>\n            </div>\n        );\n    }\n}\n\nexport default column;","import React from 'react';\nimport './TodoItemSummary.css';\n\nconst todoItemSummary = (props) => {\n\n    const item = props.item;\n\n    const itemTypes = props.itemTypes;\n    const itemTypeOptions = itemTypes.map(t => {\n        if (item.type === t) {\n            return (\n                <option key={t} value={t} selected=\"selected\">{t}</option>\n            )\n        } else {\n            return (\n                <option key={t} value={t}>{t}</option>\n            )\n        }\n    });\n\n    return (\n\n        <div className='TodoItemSummary'>\n\n            <form>\n                <label>内容：</label>\n                <input \n                    value={props.item.content}\n                    onChange={props.itemSummaryContentChanged}></input>\n            </form>\n\n            <form>\n                <label>类别：</label>\n                <select\n                    onChange={props.itemSummaryTypeChanged}>\n                    {itemTypeOptions}\n                </select>\n            </form>\n\n            <button\n                type=\"button\"\n                className=\"saveButton\"\n                onClick={() => props.saveClicked(props.item)}>确定</button>\n            <button\n                type=\"button\" \n                className=\"cancelButton\"\n                onClick={() => props.cancelClicked()}>取消</button>\n        </div>\n\n    );\n};\n\nexport default todoItemSummary;","import React from 'react';\nimport './Modal.css';\n\nconst modal = (props) => (\n    <div\n        className='Modal'\n            style={{\n                transform: props.show ? 'translateY(0)' : 'translateY(-100vh)',\n                opacity: props.show ? '1' : '0'\n            }}>\n        {props.children}\n    </div>\n);\n\nexport default modal;","import React, {Component} from 'react';\nimport './TodoListBuilder.css';\nimport initialData from '../../initialData';\nimport { DragDropContext } from 'react-beautiful-dnd';\nimport Column from '../../components/TodoList/Column/Column';\nimport TodoItemSummary from '../../components/TodoList/Column/TodoItems/TodoItem/TodoItemSummary/TodoItemSummary';\nimport Modal from '../../components/UI/Modal/Modal';\n\nclass TodoList extends Component {\n\n    state = initialData;\n\n    onDragEnd = (result) => {\n        const { destination, source, draggableId } = result;\n\n        if (!destination) {\n            return;\n        }\n\n        if (destination.droppableId === source.droppableId &&\n            destination.index === source.index) {\n            return;\n        }\n\n        if (destination.droppableId === source.droppableId) {\n\n            const column = this.state.columns[source.droppableId];\n            const newTaskIds = Array.from(column.taskIds);\n            newTaskIds.splice(source.index, 1)\n            newTaskIds.splice(destination.index, 0, draggableId)\n\n            const newColumn = {\n                ... column,\n                taskIds: newTaskIds\n            };\n\n            const newState = {\n                ...this.state,\n                columns: {\n                    ...this.state.columns,\n                    [newColumn.id]: newColumn\n                }\n            };\n\n            this.setState(newState);\n        } else {\n\n            const sourceColumn = this.state.columns[source.droppableId];\n            const destinationColumn = this.state.columns[destination.droppableId];\n            const newSourceTaskIds = Array.from(sourceColumn.taskIds);\n            const newDestinationTaskIds = Array.from(destinationColumn.taskIds);\n\n            newSourceTaskIds.splice(source.index, 1)\n            newDestinationTaskIds.splice(destination.index, 0, draggableId)\n\n            const newSourceColumn = {\n                ... sourceColumn,\n                taskIds: newSourceTaskIds\n            };\n            const newDestinationColumn = {\n                ... destinationColumn,\n                taskIds: newDestinationTaskIds\n            };\n\n            const newState = {\n                ...this.state,\n                columns: {\n                    ...this.state.columns,\n                    [newSourceColumn.id]: newSourceColumn,\n                    [newDestinationColumn.id]: newDestinationColumn\n                }\n            };\n\n            this.setState(newState);\n        }\n\n    }\n\n    formInputChangeHandler = (event, columnId) => {\n        let columns = this.state.columns;\n        let column = {... columns[columnId]};\n        const newItemToSubmit = {\n            id: null,\n            created_timestamp: null,\n            content: event.target.value,\n            done: false\n        }\n        column.itemToSubmit = newItemToSubmit;\n        columns[columnId] = column;\n\n        this.setState({columns: columns})\n    }\n\n    addItemHandler = (event, columnId) => {\n        event.preventDefault();\n\n        let columns = this.state.columns;\n        let column = {... columns[columnId]};\n        const itemToSubmit = column.itemToSubmit;\n\n        if(itemToSubmit.content) {\n            let newItems = {... this.state.items};\n            const newId = Date.now()\n            const newItem = {\n                id: newId,\n                created_timestamp: newId,\n                content: itemToSubmit.content,\n                done: false\n            }\n\n            column.taskIds.push(newItem.id);\n            columns[columnId] = column;\n\n            newItems[newId] = newItem;\n            this.setState({\n                items: newItems,\n                columns: columns});\n        }\n    }\n\n    removeItemHandler = (itemId, columnId) => {\n        // Need to remove from both  items & columns.taskIds\n        console.log(columnId)\n\n        let updatedItems = {... this.state.items};\n        delete updatedItems[itemId];\n\n        let columns = this.state.columns;\n        let updatedColumn = {... columns[columnId]};\n        const updatedTaskIds = updatedColumn.taskIds.filter(id =>\n            id !== itemId \n        );\n        updatedColumn.taskIds = updatedTaskIds;\n        columns[columnId] = updatedColumn;\n\n        this.setState({\n            items: updatedItems,\n            columns: columns\n        });\n    }\n\n    editItemHandler = (itemId) => {\n        const items = {... this.state.items}\n        const itemUnderEditing = items[itemId];\n\n        this.setState({\n            editingItem: true,\n            itemUnderEditing: {... itemUnderEditing}\n        })\n    }\n\n    revertItemDoneHandler = (itemId) => {\n        let updatedItems = {... this.state.items};\n        let updatedItem = updatedItems[itemId];\n        updatedItem.done = !updatedItem.done;\n\n        this.setState({items: updatedItems});\n    }\n\n    itemSummaryContentChangeHandler = (event) => {\n        let itemUnderEditing = this.state.itemUnderEditing;\n        itemUnderEditing.content = event.target.value;\n\n        this.setState({itemUnderEditing: itemUnderEditing})\n    }\n\n    itemSummaryTypeChangeHandler = (event) => {\n        let itemUnderEditing = this.state.itemUnderEditing;\n        itemUnderEditing.type = event.target.value;\n\n        this.setState({itemUnderEditing: itemUnderEditing})\n    }\n\n    editItemSaveHandler = (item) => {\n        let items = {... this.state.items};\n        items[item.id] = item;\n        \n        this.setState({\n            items: items,\n            editingItem: false,\n            itemUnderEditing: {}\n        })\n    }\n\n    editItemCancelHandler = () => {\n\n        this.setState({\n            editingItem: false,\n            itemUnderEditing: {}\n        })\n    }\n\n    render () {\n        const columns = this.state.columnOrder.map(columnId => {\n            const column = this.state.columns[columnId];\n            const items = column.taskIds.map(taskId => this.state.items[taskId]);\n\n            return <Column \n                        key={column.id}\n                        column={column}\n                        formInputChanged={this.formInputChangeHandler} \n                        submitted={this.addItemHandler}\n                        items={items} \n                        contentClicked={this.revertItemDoneHandler} \n                        editClicked={this.editItemHandler}\n                        closeClicked={this.removeItemHandler}/>\n        })\n\n        return (\n            <div className='TodoListBuilder'>\n                <Modal show={this.state.editingItem}>\n                    <TodoItemSummary \n                        itemTypes={this.state.itemTypes}\n                        item={this.state.itemUnderEditing}\n                        itemSummaryContentChanged={this.itemSummaryContentChangeHandler}\n                        itemSummaryTypeChanged={this.itemSummaryTypeChangeHandler}\n                        saveClicked={this.editItemSaveHandler}\n                        cancelClicked={this.editItemCancelHandler}/>\n                </Modal>\n\n                <DragDropContext\n                    onDragEnd={this.onDragEnd}>\n                    {columns}\n                </DragDropContext>\n            </div>\n        )\n    }\n\n}\n\nexport default TodoList;","import React from 'react';\nimport './App.css';\nimport Layout from './components/Layout/Layout';\nimport TodoListBuilder from './containers/TodoListBuilder/TodoListBuilder';\n\nfunction App() {\n  return (\n    <div>\n      <Layout>\n        <TodoListBuilder />\n      </Layout>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}