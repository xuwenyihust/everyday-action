{"version":3,"sources":["components/Navigation/NavigationItems/NavigationItem/NavigationItem.js","components/Navigation/NavigationItems/NavigationItems.js","components/Navigation/Navigation.js","components/Layout/Layout.js","components/TodoList/TodoItems/TodoItem/TodoItem.js","components/TodoList/TodoItems/TodoItems.js","components/TodoList/TodoForm/TodoForm.js","containers/TodoItemSummary/TodoItemSummary.js","components/UI/Modal/Modal.js","containers/TodoListBuilder/TodoListBuilder.js","App.js","serviceWorker.js","index.js"],"names":["navigationItem","props","className","href","link","active","children","navigationItems","navigation","layout","todoItem","item","done","onClick","contentClicked","id","content","type","editClicked","closeClicked","todoItems","items","map","key","todoForm","onSubmit","submitted","placeholder","value","onChange","inputChanged","TodoItemSummary","state","itemSummaryContentChangeHandler","event","itemUnderChange","target","console","log","setState","itemSummaryTypeChangeHandler","this","saveClicked","cancelClicked","Component","modal","style","transform","show","opacity","TodoList","itemToSubmit","created_timestamp","editingItem","itemUnderEditing","inputChangeHandler","newItemToSubmit","addItemHandler","preventDefault","newItems","push","Date","now","removeItemHandler","itemId","updatedItems","filter","editItemHandler","find","revertItemDoneHandler","updatedItem","editItemSaveHandler","editItemCancelHandler","itemSummaryContentEditHandler","itemSummaryContentChanged","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.3daf3cfe.chunk.js","sourcesContent":["import React from 'react';\nimport './NavigationItem.css';\n\nconst navigationItem = (props) => (\n    <li className='NavigationItem'>\n        <a \n            href={props.link}\n            className={props.active ? 'active' : null}>{props.children}</a>\n    </li>\n);\n\nexport default navigationItem;","import React from 'react'\nimport './NavigationItems.css';\nimport NavigationItem from './NavigationItem/NavigationItem';\n\nconst navigationItems = (props) => (\n    <ul className='NavigationItems'>\n        <NavigationItem link=\"/\" active={true}>主页</NavigationItem>\n    </ul>\n);\n\nexport default navigationItems;","import React from 'react';\nimport './Navigation.css';\nimport NavigationItems from './NavigationItems/NavigationItems';\n\nconst navigation = () => (\n    <header className='Navigation'>\n        {/* <div>MENU</div> */}\n        <nav>\n            <NavigationItems />\n        </nav>\n    </header>\n);\n\nexport default navigation;","import React from 'react';\nimport './Layout.css';\nimport Navigation from '../Navigation/Navigation';\n\nconst layout = (props) => {\n\n    return (\n        <div>\n            <Navigation />\n            <main className=\"Content\">\n                {props.children}\n            </main>\n        </div>\n    )\n};\n\nexport default layout;\n","import React from 'react';\nimport './TodoItem.css';\n\nconst todoItem = (props) => (\n    <div className=\"TodoItem\">\n        <p \n            className={props.item.done ? 'done' : 'undone'}\n            onClick={() => props.contentClicked(props.item.id)}>{props.item.content}</p>\n        <button\n            type=\"button\" \n            className=\"editButton\"\n            onClick={() => props.editClicked(props.item.id)}><i className=\"fa fa-bars\"></i></button>\n        <button \n            type=\"button\" \n            className=\"closeButton\"\n            onClick={() => props.closeClicked(props.item.id)}><i className=\"fa fa-close\"></i></button>\n    </div>\n);\n\nexport default todoItem;","import React from 'react';\nimport './TodoItems.css';\nimport TodoItem from './TodoItem/TodoItem';\n\nconst todoItems = (props) => {\n\n    const items = props.items.map(item =>{\n        return <TodoItem \n                    key={item.id} \n                    item={item} \n                    contentClicked={props.contentClicked} \n                    editClicked={props.editClicked} \n                    closeClicked={props.closeClicked}/>\n    })\n\n    return (\n        <div className=\"TodoItems\">\n            <ul>\n                {items}\n            </ul>\n        </div>\n    );\n};\n\nexport default todoItems;","import React from 'react';\nimport './TodoForm.css';\n\nconst todoForm = (props) => (\n    <div className='TodoForm'>\n        <form onSubmit={props.submitted}>\n            <input \n                placeholder={props.value}\n                value={props.value}\n                onChange={props.inputChanged}></input>\n            <button type=\"submit\">+</button>\n        </form>\n    </div>\n);\n\nexport default todoForm;","import React, {Component} from 'react';\nimport './TodoItemSummary.css';\n\nclass TodoItemSummary extends Component {\n\n    state = {\n        item: null\n    }\n\n    itemSummaryContentChangeHandler = (event) => {\n        let itemUnderChange;\n        if (this.state.item === null) {\n            itemUnderChange = this.props.item;\n        } else {\n            itemUnderChange = this.state.item;\n        }\n\n        itemUnderChange.content = event.target.value;\n        console.log(itemUnderChange);\n        this.setState({item: itemUnderChange})\n    }\n\n    itemSummaryTypeChangeHandler = (event) => {\n        let itemUnderChange;\n        if (this.state.item === null) {\n            itemUnderChange = this.props.item;\n        } else {\n            itemUnderChange = this.state.item;\n        }\n\n        itemUnderChange.type = event.target.value;\n        console.log(itemUnderChange);\n        this.setState({item: itemUnderChange})\n    }\n\n    render () {\n        \n        let item = null;\n\n        if (this.state.item === null) {\n            item = this.props.item\n        } else {\n            item = this.state.item\n        }\n\n        return (\n            <div className='TodoItemSummary'>\n\n                <form>\n                    <label>内容：</label>\n                    <input \n                        value={item.content}\n                        onChange={this.itemSummaryContentChangeHandler}></input>\n                </form>\n\n                <form>\n                    <label>类别：</label>\n                    <select\n                        onChange={this.itemSummaryTypeChangeHandler}>\n                        <option value=\"运动\">运动</option>\n                        <option value=\"生活\">生活</option>\n                        <option value=\"学习\">学习</option>\n                    </select>\n                </form>\n\n                <button\n                    type=\"button\"\n                    className=\"saveButton\"\n                    onClick={() => this.props.saveClicked()}>确定</button>\n                <button\n                    type=\"button\" \n                    className=\"cancelButton\"\n                    onClick={() => this.props.cancelClicked()}>取消</button>\n            </div>\n        )\n    }\n};\n\nexport default TodoItemSummary;","import React from 'react';\nimport './Modal.css';\n\nconst modal = (props) => (\n    <div\n        className='Modal'\n            style={{\n                transform: props.show ? 'translateY(0)' : 'translateY(-100vh)',\n                opacity: props.show ? '1' : '0'\n            }}>\n        {props.children}\n    </div>\n);\n\nexport default modal;","import React, {Component} from 'react';\nimport './TodoListBuilder.css';\nimport TodoItems from '../../components/TodoList/TodoItems/TodoItems';\nimport TodoForm from '../../components/TodoList/TodoForm/TodoForm';\nimport TodoItemSummary from '../TodoItemSummary/TodoItemSummary';\nimport Modal from '../../components/UI/Modal/Modal';\n\nclass TodoList extends Component {\n\n    state = {\n        itemToSubmit: {\n            id: null,\n            content: \"新任务\",\n            type: null,\n            created_timestamp: null,\n            done: false\n        },\n        items: [\n            {\n                id: 1593920420073,\n                created_timestamp: 1593920420073,\n                content: \"跑步\",\n                type: \"运动\",\n                done: false\n            },\n            {\n                id: 1593920427447,\n                created_timestamp: 1593920420073,\n                content: \"混合有氧\",\n                type: \"运动\",\n                done: false\n            },\n            {\n                id: 1593920442267,\n                created_timestamp: 1593920420073,\n                content: \"洗牙\",\n                type: \"生活\",\n                done: false\n            },\n            {\n                id: 1593988570469,\n                created_timestamp: 1593988570469,\n                content: \"看书\",\n                type: \"学习\",\n                done: false\n            }\n        ],\n\n        editingItem: false,\n        itemUnderEditing: {}\n    }\n\n    inputChangeHandler = (event) => {\n        console.log(event.target.value);\n        const newItemToSubmit = {\n            id: null,\n            created_timestamp: null,\n            content: event.target.value,\n            done: false\n        }\n\n        this.setState({itemToSubmit: newItemToSubmit})\n    }\n\n    addItemHandler = (event) => {\n        event.preventDefault();\n        const itemToSubmit = this.state.itemToSubmit;\n\n        if(itemToSubmit.content) {\n            let newItems = [... this.state.items];\n            newItems.push({\n                id: Date.now(),\n                created_timestamp: Date.now(),\n                content: itemToSubmit.content,\n                done: false\n            });\n            this.setState({items: newItems});\n        }\n    }\n\n    removeItemHandler = (itemId) => {\n        let updatedItems = this.state.items;\n        updatedItems = updatedItems.filter(item => \n                        item.id !== itemId);\n\n        this.setState({items: updatedItems});\n    }\n\n    editItemHandler = (itemId) => {\n        const itemUnderEditing = this.state.items.find(item => item.id === itemId);\n\n        this.setState({\n            editingItem: true,\n            itemUnderEditing: itemUnderEditing\n        })\n    }\n\n    revertItemDoneHandler = (itemId) => {\n        let updatedItems = this.state.items;\n        let updatedItem = updatedItems.find(item => item.id === itemId);\n        updatedItem.done = !updatedItem.done;\n\n        this.setState({items: updatedItems});\n    }\n\n    editItemSaveHandler = () => {\n        this.setState({\n            editingItem: false,\n            itemUnderEditing: {}\n        })\n    }\n\n    editItemCancelHandler = () => {\n        this.setState({\n            editingItem: false,\n            itemUnderEditing: {}\n        })\n    }\n\n    itemSummaryContentEditHandler = (event) => {\n        console.log(event.target);\n    }\n\n    render () {\n        return (\n            <div className='TodoListBuilder'>\n                <Modal show={this.state.editingItem}>\n                    <TodoItemSummary \n                        item={this.state.itemUnderEditing}\n                        itemSummaryContentChanged={this.itemSummaryContentEditHandler}\n                        saveClicked={this.editItemSaveHandler}\n                        cancelClicked={this.editItemCancelHandler}/>\n                </Modal>\n\n                <h4>任务清单</h4>\n                <TodoForm \n                    value={this.state.itemToSubmit.content} \n                    inputChanged={this.inputChangeHandler} \n                    submitted={this.addItemHandler}/>\n                <TodoItems \n                    items={this.state.items} \n                    contentClicked={this.revertItemDoneHandler} \n                    editClicked={this.editItemHandler}\n                    closeClicked={this.removeItemHandler}/>\n            </div>\n        )\n    }\n\n}\n\nexport default TodoList;","import React from 'react';\nimport './App.css';\nimport Layout from './components/Layout/Layout';\nimport TodoListBuilder from './containers/TodoListBuilder/TodoListBuilder';\n\nfunction App() {\n  return (\n    <div>\n      <Layout>\n        <TodoListBuilder />\n      </Layout>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}