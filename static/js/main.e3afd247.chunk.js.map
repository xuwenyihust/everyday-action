{"version":3,"sources":["components/Navigation/NavigationItems/NavigationItem/NavigationItem.js","components/Navigation/NavigationItems/NavigationItems.js","components/Navigation/Navigation.js","components/Layout/Layout.js","initialData.js","components/TodoList/Column/TodoItems/TodoItem/TodoItem.js","components/TodoList/Column/TodoItems/TodoItems.js","components/TodoList/Column/TodoForm/TodoForm.js","components/TodoList/Column/Column.js","components/TodoList/Column/TodoItems/TodoItem/TodoItemSummary/TodoItemSummary.js","components/UI/Modal/Modal.js","containers/TodoListBuilder/TodoListBuilder.js","App.js","serviceWorker.js","index.js"],"names":["navigationItem","props","className","href","link","active","children","navigationItems","navigation","layout","initialData","itemTypes","items","1593920420073","id","created_timestamp","content","type","done","1593920427447","1593920442267","1593988570469","columns","title","taskIds","itemToSubmit","columnOrder","editingItem","itemUnderEditing","todoItem","icon","item","Icon","onClick","contentClicked","editClicked","closeClicked","columnId","todoItems","itemObjects","Object","keys","map","itemKey","key","todoForm","onSubmit","submitted","placeholder","value","onChange","inputChanged","column","e","formInputChanged","todoItemSummary","itemTypeOptions","t","selected","itemSummaryContentChanged","itemSummaryTypeChanged","saveClicked","cancelClicked","modal","style","transform","show","opacity","TodoList","state","formInputChangeHandler","event","newItemToSubmit","target","setState","addItemHandler","preventDefault","newItems","newId","Date","now","newItem","push","removeItemHandler","itemId","updatedItems","updatedColumn","updatedTaskIds","filter","editItemHandler","revertItemDoneHandler","updatedItem","itemSummaryContentChangeHandler","itemSummaryTypeChangeHandler","editItemSaveHandler","editItemCancelHandler","this","taskId","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.e3afd247.chunk.js","sourcesContent":["import React from 'react';\nimport './NavigationItem.css';\n\nconst navigationItem = (props) => (\n    <li className='NavigationItem'>\n        <a \n            href={props.link}\n            className={props.active ? 'active' : null}>{props.children}</a>\n    </li>\n);\n\nexport default navigationItem;","import React from 'react'\nimport './NavigationItems.css';\nimport NavigationItem from './NavigationItem/NavigationItem';\n\nconst navigationItems = (props) => (\n    <ul className='NavigationItems'>\n        <NavigationItem link=\"/\" active={true}>主页</NavigationItem>\n    </ul>\n);\n\nexport default navigationItems;","import React from 'react';\nimport './Navigation.css';\nimport NavigationItems from './NavigationItems/NavigationItems';\n\nconst navigation = () => (\n    <header className='Navigation'>\n        {/* <div>MENU</div> */}\n        <nav>\n            <NavigationItems />\n        </nav>\n    </header>\n);\n\nexport default navigation;","import React from 'react';\nimport './Layout.css';\nimport Navigation from '../Navigation/Navigation';\n\nconst layout = (props) => {\n\n    return (\n        <div>\n            <Navigation />\n            <main className=\"Content\">\n                {props.children}\n            </main>\n        </div>\n    )\n};\n\nexport default layout;\n","const initialData = {\n\n    itemTypes: [\"运动\", \"生活\", \"学习\", \"工作\", \"娱乐\"],\n    items: {\n        1593920420073: {\n            id: 1593920420073,\n            created_timestamp: 1593920420073,\n            content: \"跑步\",\n            type: \"运动\",\n            done: false\n        },\n        1593920427447: {\n            id: 1593920427447,\n            created_timestamp: 1593920420073,\n            content: \"混合有氧\",\n            type: \"运动\",\n            done: false\n        },\n        1593920442267: {\n            id: 1593920442267,\n            created_timestamp: 1593920420073,\n            content: \"洗牙\",\n            type: \"生活\",\n            done: false\n        },\n        1593988570469: {\n            id: 1593988570469,\n            created_timestamp: 1593988570469,\n            content: \"看书\",\n            type: \"学习\",\n            done: false\n        }\n    },\n\n    columns: {\n        'column-1': {\n            id: 'column-1',\n            title: '感兴趣',\n            taskIds: [1593920420073, 1593920427447],\n            itemToSubmit: {\n                id: null,\n                content: \"新任务\",\n                type: null,\n                created_timestamp: null,\n                done: false\n            },\n        },\n        'column-2': {\n            id: 'column-2',\n            title: '行动中',\n            taskIds: [1593920442267, 1593988570469],\n            itemToSubmit: {\n                id: null,\n                content: \"新任务\",\n                type: null,\n                created_timestamp: null,\n                done: false\n            },\n        }\n    },\n\n    columnOrder: ['column-1', 'column-2'],\n\n    editingItem: false,\n    itemUnderEditing: {}\n}\n\nexport default initialData;","import React from 'react';\nimport Icon from '@material-ui/core/Icon';\nimport DirectionsRunIcon from '@material-ui/icons/DirectionsRun';\nimport ImportContactsIcon from '@material-ui/icons/ImportContacts';\nimport AirlineSeatIndividualSuiteIcon from '@material-ui/icons/AirlineSeatIndividualSuite';\nimport LaptopChromebookIcon from '@material-ui/icons/LaptopChromebook';\nimport SportsEsportsIcon from '@material-ui/icons/SportsEsports';\nimport './TodoItem.css';\n\nconst todoItem = (props) => {\n\n    let icon;\n    switch (props.item.type) {\n        case \"运动\":\n            icon = <DirectionsRunIcon />;\n            break;\n        case \"生活\":\n            icon = <AirlineSeatIndividualSuiteIcon />;\n            break;\n        case \"学习\":\n            icon = <ImportContactsIcon />;\n            break;\n        case \"工作\":\n            icon = <LaptopChromebookIcon />;\n            break;\n        case \"娱乐\":\n            icon = <SportsEsportsIcon />;\n            break;\n        default:\n            icon = <Icon>star</Icon>;\n            break;\n    }\n\n    return (\n        <div className=\"TodoItem\">\n            {icon}\n            <p \n                className={props.item.done ? 'done' : 'undone'}\n                onClick={() => props.contentClicked(props.item.id)}>{props.item.content}</p>\n\n            <button\n                type=\"button\" \n                className=\"editButton\"\n                onClick={() => props.editClicked(props.item.id)}><i className=\"fa fa-bars\"></i></button>\n            <button \n                type=\"button\" \n                className=\"closeButton\"\n                onClick={() => props.closeClicked(props.item.id, props.columnId)}><i className=\"fa fa-close\"></i></button>\n        </div>\n    );\n};\n\nexport default todoItem;","import React from 'react';\nimport './TodoItems.css';\nimport TodoItem from './TodoItem/TodoItem';\n\nconst todoItems = (props) => {\n\n    const itemObjects = props.items;\n    const items = Object.keys(itemObjects).map(itemKey => {\n        return <TodoItem \n                    columnId={props.columnId}\n                    key={itemObjects[itemKey].id} \n                    item={itemObjects[itemKey]} \n                    contentClicked={props.contentClicked} \n                    editClicked={props.editClicked} \n                    closeClicked={props.closeClicked}/>\n    })\n\n    return (\n        <div className=\"TodoItems\">\n            <h4>{props.key}</h4>\n            <ul>\n                {items}\n            </ul>\n        </div>\n    );\n};\n\nexport default todoItems;","import React from 'react';\nimport './TodoForm.css';\n\nconst todoForm = (props) => (\n    <div className='TodoForm'>\n        <form onSubmit={props.submitted}>\n            <input \n                placeholder={props.value}\n                value={props.value}\n                onChange={props.inputChanged}></input>\n            <button type=\"submit\">+</button>\n        </form>\n    </div>\n);\n\nexport default todoForm;","import React from 'react';\nimport './Column.css';\nimport TodoItems from './TodoItems/TodoItems';\nimport TodoForm from './TodoForm/TodoForm';\n\nconst column = (props) => {\n\n    return (\n        <div className='Column'>\n            <h4>{props.column.title}</h4>\n            <TodoForm \n                value={props.column.itemToSubmit.content} \n                inputChanged={(e) => props.formInputChanged(e, props.column.id)} \n                submitted={(e) => props.submitted(e, props.column.id)}/>\n            <TodoItems \n                columnId={props.column.id}\n                items={props.items} \n                contentClicked={props.contentClicked} \n                editClicked={props.editClicked}\n                closeClicked={props.closeClicked}/>\n        </div>\n    );\n}\n\nexport default column;","import React from 'react';\nimport './TodoItemSummary.css';\n\nconst todoItemSummary = (props) => {\n\n    const item = props.item;\n\n    const itemTypes = props.itemTypes;\n    const itemTypeOptions = itemTypes.map(t => {\n        if (item.type === t) {\n            return (\n                <option key={t} value={t} selected=\"selected\">{t}</option>\n            )\n        } else {\n            return (\n                <option key={t} value={t}>{t}</option>\n            )\n        }\n    });\n\n    return (\n\n        <div className='TodoItemSummary'>\n\n            <form>\n                <label>内容：</label>\n                <input \n                    value={props.item.content}\n                    onChange={props.itemSummaryContentChanged}></input>\n            </form>\n\n            <form>\n                <label>类别：</label>\n                <select\n                    onChange={props.itemSummaryTypeChanged}>\n                    {itemTypeOptions}\n                </select>\n            </form>\n\n            <button\n                type=\"button\"\n                className=\"saveButton\"\n                onClick={() => props.saveClicked(props.item)}>确定</button>\n            <button\n                type=\"button\" \n                className=\"cancelButton\"\n                onClick={() => props.cancelClicked()}>取消</button>\n        </div>\n\n    );\n};\n\nexport default todoItemSummary;","import React from 'react';\nimport './Modal.css';\n\nconst modal = (props) => (\n    <div\n        className='Modal'\n            style={{\n                transform: props.show ? 'translateY(0)' : 'translateY(-100vh)',\n                opacity: props.show ? '1' : '0'\n            }}>\n        {props.children}\n    </div>\n);\n\nexport default modal;","import React, {Component} from 'react';\nimport './TodoListBuilder.css';\nimport initialData from '../../initialData';\nimport Column from '../../components/TodoList/Column/Column';\nimport TodoItemSummary from '../../components/TodoList/Column/TodoItems/TodoItem/TodoItemSummary/TodoItemSummary';\nimport Modal from '../../components/UI/Modal/Modal';\n\nclass TodoList extends Component {\n\n    state = initialData;\n\n    formInputChangeHandler = (event, columnId) => {\n        let columns = this.state.columns;\n        let column = {... columns[columnId]};\n        const newItemToSubmit = {\n            id: null,\n            created_timestamp: null,\n            content: event.target.value,\n            done: false\n        }\n        column.itemToSubmit = newItemToSubmit;\n        columns[columnId] = column;\n\n        this.setState({columns: columns})\n    }\n\n    addItemHandler = (event, columnId) => {\n        event.preventDefault();\n\n        let columns = this.state.columns;\n        let column = {... columns[columnId]};\n        const itemToSubmit = column.itemToSubmit;\n\n        if(itemToSubmit.content) {\n            let newItems = {... this.state.items};\n            const newId = Date.now()\n            const newItem = {\n                id: newId,\n                created_timestamp: newId,\n                content: itemToSubmit.content,\n                done: false\n            }\n\n            column.taskIds.push(newItem.id);\n            columns[columnId] = column;\n\n            newItems[newId] = newItem;\n            this.setState({\n                items: newItems,\n                columns: columns});\n        }\n    }\n\n    removeItemHandler = (itemId, columnId) => {\n        // Need to remove from both  items & columns.taskIds\n        let updatedItems = {... this.state.items};\n        delete updatedItems[itemId];\n\n        let columns = this.state.columns;\n        let updatedColumn = {... columns[columnId]};\n        const updatedTaskIds = updatedColumn.taskIds.filter(id =>\n            id !== itemId \n        );\n        updatedColumn.taskIds = updatedTaskIds;\n        columns[columnId] = updatedColumn;\n\n        this.setState({\n            items: updatedItems,\n            columns: columns\n        });\n    }\n\n    editItemHandler = (itemId) => {\n        const items = {... this.state.items}\n        const itemUnderEditing = items[itemId];\n\n        this.setState({\n            editingItem: true,\n            itemUnderEditing: {... itemUnderEditing}\n        })\n    }\n\n    revertItemDoneHandler = (itemId) => {\n        let updatedItems = {... this.state.items};\n        let updatedItem = updatedItems[itemId];\n        updatedItem.done = !updatedItem.done;\n\n        this.setState({items: updatedItems});\n    }\n\n    itemSummaryContentChangeHandler = (event) => {\n        let itemUnderEditing = this.state.itemUnderEditing;\n        itemUnderEditing.content = event.target.value;\n\n        this.setState({itemUnderEditing: itemUnderEditing})\n    }\n\n    itemSummaryTypeChangeHandler = (event) => {\n        let itemUnderEditing = this.state.itemUnderEditing;\n        itemUnderEditing.type = event.target.value;\n\n        this.setState({itemUnderEditing: itemUnderEditing})\n    }\n\n    editItemSaveHandler = (item) => {\n        let items = {... this.state.items};\n        items[item.id] = item;\n        \n        this.setState({\n            items: items,\n            editingItem: false,\n            itemUnderEditing: {}\n        })\n    }\n\n    editItemCancelHandler = () => {\n\n        this.setState({\n            editingItem: false,\n            itemUnderEditing: {}\n        })\n    }\n\n    render () {\n        const columns = this.state.columnOrder.map(columnId => {\n            const column = this.state.columns[columnId];\n            const items = column.taskIds.map(taskId => this.state.items[taskId]);\n\n            return <Column \n                        column={column}\n                        formInputChanged={this.formInputChangeHandler} \n                        submitted={this.addItemHandler}\n                        items={items} \n                        contentClicked={this.revertItemDoneHandler} \n                        editClicked={this.editItemHandler}\n                        closeClicked={this.removeItemHandler}/>\n        })\n\n        return (\n            <div className='TodoListBuilder'>\n                <Modal show={this.state.editingItem}>\n                    <TodoItemSummary \n                        itemTypes={this.state.itemTypes}\n                        item={this.state.itemUnderEditing}\n                        itemSummaryContentChanged={this.itemSummaryContentChangeHandler}\n                        itemSummaryTypeChanged={this.itemSummaryTypeChangeHandler}\n                        saveClicked={this.editItemSaveHandler}\n                        cancelClicked={this.editItemCancelHandler}/>\n                </Modal>\n\n                {columns}\n                \n            </div>\n        )\n    }\n\n}\n\nexport default TodoList;","import React from 'react';\nimport './App.css';\nimport Layout from './components/Layout/Layout';\nimport TodoListBuilder from './containers/TodoListBuilder/TodoListBuilder';\n\nfunction App() {\n  return (\n    <div>\n      <Layout>\n        <TodoListBuilder />\n      </Layout>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}